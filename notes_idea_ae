__________
SUPERVISED FANNY

predictor is an encoder + dense layer
encoder_sup(poisson) -> embedding, dense(embedding) -> logits

objective: logits = target

_________

UNSUPERVISED

Encoder(poisson) -> embedding, Decoder(embedding) -> poisson'

objective: min(poisson, poisson')


Encoder = encoder_sup

class CNN_Choupi():
	# Already implemented
	

class Decoder():
	# To write


class AutoEncoder(nn.Module):

	def _init_(self, pretrained=True):
		
		self.encoder = CNN_Choupi()
		self.decoder = Decoder()
		
		if pretrained:
			self.encoder.load('ckpt_choupi')
	
	
	def _call_(self, image):
		
		encodings = self.encoder(image)
		new_image = self.decoder(encodings)
		
		# loss example
		# loss = L2(image, new_image)
		
		return {'encodings': encodings, 'new_image': new_image, 'loss', loss}
	
	
	def encode(self, image):
	
		return self.encoder(image)
		

my_ae = AutoEncoder(...)

results = my_ae(...)


encodings = my_ae.encode(image)